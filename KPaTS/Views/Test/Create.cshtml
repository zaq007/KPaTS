@model KPaTS.Models.TestModel

@{
    ViewBag.Title = "Создание теста";
    ViewBag.PageId = KPaTS.Core.PageID.PAGE_TEST_CREATE;
}

@using (Html.BeginForm("Create", "Test", FormMethod.Post, new { id = "test-create"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
<div class="mdl-grid test-data mdl-color--primary">
    <div class="mdl-layout-spacer"></div>
    <section class="mdl-color--white mdl-cell mdl-cell--4-col card-padding mdl-cell--top mdl-shadow--2dp">
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @Html.LabelFor(model => model.Name, new { @class = "mdl-textfield__label" })
            @Html.TextBoxFor(model => model.Name, new { @class = "mdl-textfield__input" })
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <br />
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @Html.LabelFor(model => model.Description, new { @class = "mdl-textfield__label" })
            @Html.TextBoxFor(model => model.Description, new { @class = "mdl-textfield__input" })
            @Html.ValidationMessageFor(model => model.Description)
        </div>
        <br />
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @Html.LabelFor(model => model.Shortcut, new { @class = "mdl-textfield__label" })
            @Html.TextBoxFor(model => model.Shortcut, new { @class = "mdl-textfield__input" })
            @Html.ValidationMessageFor(model => model.Shortcut)
        </div>

        <div class="mdl-selectfield">
            @Html.DropDownList("Space[Id]", KPaTS.Core.ViewHelper.GetSpacesList())
        </div>
        <div class="mdl-selectfield" id="subject" style="display: none">
            @Html.DropDownList("Subject[Id]", new SelectList(new List<SelectListItem>()))
        </div>
    </section>
    <section class="mdl-cell mdl-cell--4-col test-preview">
        @Html.Partial("~/Views/Test/_TestCardPartialView.cshtml", new KPaTS.Models.TestInfoModel())
        <ul class="suggest suggest-preview mdl-color--white mdl-shadow--2dp">
            <li class="suggest-item dummy">
                <a>#prevTest</a>
            </li>
            @Html.Partial("~/Views/Test/_TestAutocompletePartial.cshtml", new KPaTS.Models.TestInfoModel())
            <li class="suggest-item dummy">
                <a>#postTest</a>
            </li>
            <div class="overlay"></div>
        </ul>
    </section>
    <div class="mdl-layout-spacer"></div>
    <div id="test-fab" class="right-fab mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored">
        <i class="material-icons">add</i>
    </div>
</div>
<div class="mdl-grid">
    <div class="mdl-layout-spacer"></div>
    <section class="mdl-cell mdl-cell--8-col card-padding">
        <h5>@Html.LabelFor(model => model.Questions)</h5>
        <div class ="questions mdl-grid"></div>
        <div class="mdl-selectfield">
            @Html.DropDownList("QuestionType", EnumHelper.GetSelectList(typeof(KPaTS.Models.QuestionType)))
        </div>
        <input class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored" type="button" value="Add question" onClick="addQuestion()"/>
    </section>
    <div class="mdl-layout-spacer"></div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $("#Shortcut").keyup(function () {
            $(".mdl-card__title-text").text("#" + $("#Shortcut").val());
            $(".suggest-item:not(.dummy) .shortcut").text("#" + $("#Shortcut").val());
        });

        $("#Description").keyup(function () {
            $(".mdl-card__supporting-text").text($("#Description").val());
        });

        $("#Space_Id_").change(function () {
            if ($("#Space_Id_").val() != 0) {
                $(".test-card .mdl-card__subtitle-text").show()
                $(".suggest-item:not(.dummy) .space").show()
            }
            else {
                $(".test-card .mdl-card__subtitle-text").hide()
                $(".suggest-item:not(.dummy) .space").hide()
            }

            $(".suggest-item:not(.dummy) .space").text("@@" + $("#Space_Id_ option:selected").text().toUpperCase());
        });

        var questionsCount = 0;

        function addQuestion() {
            var id = questionsCount++;
            var type = $("#QuestionType option:selected").val();
            $.get("/Test/GetQuestionView", {
                questionId: id,
                type: type
            }, function (data) {
                $(".questions").append(data);
                $(".question.displayNone").slideDown();
                componentHandler.upgradeAllRegistered();
                addAnswer(id, type)
            })
        }

        function addAnswer(questionId, type) {
            $.get("/Test/GetAnswerView", {
                questionId: questionId,
                type: type,
                answerId: $("#answers" + questionId).children().size()
            }, function (data) {
                $("#answers" + questionId).append(data);
                componentHandler.upgradeAllRegistered();
            })
        }

        $(document).ready(function () {
            $("#Space_Id_").on("change", function (data) {
                $.get("/Api/GetSpaceSubjects", {
                    id: $("#Space_Id_ option:selected").val()
                }, function (data) {
                    $.each(data, function (i, item) {
                        $('#Subject_Id_').append($('<option>', {
                            value: item.Id,
                            text: item.Shortcut
                        }));
                    });
                    $('#subject').show();
                    $('.test-card').addClass("decorated math");
                })
            });

            $(".questions").on("keyup", ".answer INPUT", function () {
                if ($(this).val()) {
                    addAnswerIfNeeded($(this));
                }
                else {
                    removeAnswerIfNeeded($(this));
                }
            });

            function addAnswerIfNeeded(input) {
            }

            function removeAnswerIfNeeded(input) {
            }

            /*$("#Shortcut").on("change", function (data) {
                $.get("/Api/CheckTestShortcut", { shortcut: $("#Shortcut").val() }, function (data) {
                    if (data.result == 0)
                        $("#Shortcut").parent().addClass("is-invalid");
                    else
                        $("#Shortcut").parent().removeClass("is-invalid");
                })
            });*/

            $("#test-fab").on("click", function () {
                $("#test-create").submit();
            });
        });
        registerScrollTransformation($(".mdl-layout__content"), $(".test-data"), $("#test-fab"), $(".test-data"), $(".mdl-layout__header-row"));

        $("body").on("click", ".mdl-radio", function () {
            $(this).parent().parent().parent().find(".mdl-radio").removeClass("is-checked");
            $(this).addClass("is-checked");
            $(this).parent().parent().parent().find("input[type='radio']").val("false");
            $(this).find("input[type='radio']").val("true");
        });
</script>
}
