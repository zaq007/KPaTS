@model KPaTS.Models.TestModel

@{
    ViewBag.Title = @Model.Name;
}

<div class="mdl-grid mdl-color--primary">
    <div class="mdl-layout-spacer"></div>
    <div class="mdl-cell mdl-cell--8-col">
        <div class="question-control mdl-color--optic-white mdl-shadow--2dp mdl-typography--text-center">
            <button class="button-back mdl-button mdl-button--fab mdl-button--mini-fab" disabled>
                <i class="material-icons">arrow_back</i>
            </button>
            Question <span id="current-question-id"></span> / @Model.Questions.Count
            <button class="button-forward mdl-button mdl-button--fab mdl-button--mini-fab">
                <i class="material-icons">arrow_forward</i>
            </button>
        </div>
    </div>
    <div class="mdl-layout-spacer"></div>
</div>

<div class="mdl-grid">
    <div class="mdl-layout-spacer"></div>
    <div class="mdl-cell mdl-cell--8-col page-wrapper">
    @using (Html.BeginForm("Pass", "Test", FormMethod.Post, new { id = "test-pass" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(x => x.Id)
        var questions = Model.Questions.ToList();
        for (int i = 0; i < questions.Count; i++ )
        {
            var dic = new ViewDataDictionary();
            dic.Add("count", i);
            @Html.Partial("_QuestionPartialView", questions[i], dic)
        }
    }
    </div>
    <div class="mdl-layout-spacer"></div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function PassController(questions) {
            this.questions = questions;
            this.currentQuestionId = 0;

            this.questions.hide().first().show();
            this.restoreFromLocalStorage();
            if (this.isOnLastQuestion()) {
                $(".button-forward").addClass("mdl-button--colored").children("i").text("check");
            }
        }

        PassController.prototype.restoreFromLocalStorage = function () {
            var questionData = JSON.parse(localStorage.getItem('@Model.Id'));
            for (var questionId in questionData) {
                var question = questionData[questionId];
                var id = "#" + question.id;
                id = id.replace(/\[/g, "\\[").replace(/\]/g, "\\]");
                var $input = $(id);
                if (!$input.is("textarea")) {
                    $input.attr("checked", question.data);
                }
                else {
                    $input.val(question.data);
                }
            }
        }

        PassController.prototype.updateLocalStorage = function () {
            var questionData = [];
            $(this.questions).children(".answers").each(function (index, answers) {
                $(answers).find('input[type!="hidden"], textarea').each(function (index, answer) {
                    if (!$(answer).is("textarea")) {
                        if ($(answer).is(":checked"))
                            questionData.push({"id" : $(answer).attr("id"), "data": $(answer).is(":checked")});
                    }
                    else {
                        if ($(answer).val())
                            questionData.push({ "id": $(answer).attr("id"), "data": $(answer).val() });
                    }
                });
            });
            if (questionData.length != 0) {
                localStorage.setItem('@Model.Id', JSON.stringify(questionData));
            }
        }

        PassController.prototype.clearLocalStorage = function () {
            localStorage.removeItem('@Model.Id');
        }

        PassController.prototype.nextQuestion = function () {
            if (this.currentQuestionId + 1 < this.questions.length) {
                $(this.questions[this.currentQuestionId]).hide();
                this.currentQuestionId++;
                $(this.questions[this.currentQuestionId]).show();
                return true;
            }
            return false;
        };

        PassController.prototype.prevQuestion = function () {
            if (this.currentQuestionId - 1 >= 0) {
                $(this.questions[this.currentQuestionId]).hide();
                this.currentQuestionId--;
                $(this.questions[this.currentQuestionId]).show();
                return this.currentQuestionId != 0;
            }
            return false;
        };

        PassController.prototype.isOnLastQuestion = function () {
            return this.currentQuestionId == (this.questions.length - 1)
        }

        PassController.prototype.getCurrentQuestionId = function () {
            return this.currentQuestionId;
        }

        var passController = new PassController($(".question-card"));
        $("#current-question-id").text(passController.getCurrentQuestionId() + 1);

        $(".button-forward").click(function () {
            passController.updateLocalStorage();
            if (passController.nextQuestion()) {
                $("#current-question-id").text(passController.getCurrentQuestionId() + 1);
                $(".button-back").removeAttr("disabled");
                if (passController.isOnLastQuestion()) {
                    $(".button-forward").addClass("mdl-button--colored").children("i").text("check");
                }
                return true;
            }
            else {
                passController.clearLocalStorage()
                $("#test-pass").submit();
            }
        });

        $(".button-back").on("click", function () {
            if (!passController.prevQuestion()) {
                $(this).prop("disabled", true);
            }
            $(".button-forward").removeClass("mdl-button--colored").children("i").text("arrow_forward");
            $("#current-question-id").text(passController.getCurrentQuestionId() + 1);
        });

        $("body").on("click", ".mdl-radio", function () {
            $(this).parent().parent().parent().find(".mdl-radio").removeClass("is-checked");
            $(this).addClass("is-checked");
            $(this).parent().parent().parent().find("input[type='radio']").val("false");
            $(this).find("input[type='radio']").val("true");
        });
    </script>
}